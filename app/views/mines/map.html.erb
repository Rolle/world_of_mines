<div class="container bs-docs-container">
    <div class="row">
        <div class="col-md-12" role="main">
            <div class="panel panel-primary">
                <div class="panel-heading">
                    <h3>Karte</b></h3>
                </div>
                <div class="panel-body">
                  <div class="form-inline form-group">
                  <% if current_user.admin? %>
                    <%= link_to 'Export', export_work_list_mines_path, data: {no_turbolink: true}, class: "btn btn-primary" %>
                   <% end %> 
                    <%= label_tag "Typ: "%> 
                    <%= select_tag :sort, options_for_select({"Alle" => 99, "Bergwerk" => 8, "Stollen" => 1, "Stollenmund" => 2, "Tagebau" => 3, "Halde" =>4, "Bunker" =>5,"Luftschutzstollen" =>6,"Lost place" =>7,"N/A" =>0, "Höhle" => 9, "Tunnel" => 10, "U-Verlagerung" => 11}), :class=>"input-small form-control", :onchange => 'select_typ(this.value)' %>
                    <!--%= link_to "Clear", "", class: "btn btn-primary" %-->
                    <%= label_tag "Zustand: "%> 
                    <%= select_tag :state, options_for_select({"Alle" => 99, "unbekannt" =>0, "offen" => 1, "zugefallen" => 2, "verschlossen" => 3, "abgerissen" => 4, "verfüllt" => 5, "verschollen" => 6, "aktiv" =>7 }), :class=>"input-small form-control", :onchange => 'select_zustand(this.value)' %>
                    <!--%= link_to "Clear", "", class: "btn btn-primary" %-->
                  </div>
                  <div id ="map" style="width:auto; height: 700px;"></div>
                </div>
            </div>
        </div>
    </div>
</div>
<%=render(:partial => 'new', locals: {mine: @new_mine, photo: @new_photo}) %>

<div id='popup'>
</div>

<script type='text/javascript'>   
    <% if Rails.env.production? %>
            L.Icon.Default.imagePath = '/';
    <% else %>
            L.Icon.Default.imagePath = 'assets';
    <% end %>
    
    var redMarker = L.AwesomeMarkers.icon({
              icon: 'search', 
              markerColor: 'red',
              prefix: 'fa'
    })
    var darkredMarker = L.AwesomeMarkers.icon({
              icon: 'search', 
              markerColor: 'darkred',
              prefix: 'fa'
    })
    var orangeMarker = L.AwesomeMarkers.icon({
              icon: 'search', 
              markerColor: 'orange',
              prefix: 'fa'
    })
    var greenMarker = L.AwesomeMarkers.icon({
              icon: 'search', 
              markerColor: 'green',
              prefix: 'fa'
    })
    var darkgreenMarker = L.AwesomeMarkers.icon({
              icon: 'search', 
              markerColor: 'darkgreen',
              prefix: 'fa'
    })
    var blueMarker = L.AwesomeMarkers.icon({
              icon: 'search', 
              markerColor: 'blue',
              prefix: 'fa'
    })
    var purpleMarker = L.AwesomeMarkers.icon({
              icon: 'search', 
              markerColor: 'purple',
              prefix: 'fa'
    })
    var cadetblueMarker = L.AwesomeMarkers.icon({
              icon: 'search', 
              markerColor: 'cadetblue',
              prefix: 'fa'
    })
    var darkpurpleMarker = L.AwesomeMarkers.icon({
              icon: 'search', 
              markerColor: 'darkpurple',
              prefix: 'fa'
    })    
    var ma = {};
    ma[0] = redMarker;
    ma[1] = darkredMarker;
    ma[2] = darkpurpleMarker;
    ma[3] = greenMarker;
    ma[4] = darkgreenMarker;
    ma[5] = blueMarker;
    ma[6] = purpleMarker;
    ma[7] = cadetblueMarker;
    ma[8] = orangeMarker;

    map = new L.Map('map', {
      worldCopyJump: true,
      fullscreenControl: true
    });
    
    <% if current_user.user? %>
      map.on('click', addMarker);
    <% else %>
      map.options.maxZoom = 12;
      map.options.minZoom = 8;
    <% end %>

    <% if @mine.nil? %>
      map.setView(new L.LatLng(49.77477900007886,6.80334), 12);
    <% else %>
      map.setView(new L.LatLng(<%= @mine.latitude.to_s %>,<%= @mine.longitude.to_s %>), 15);
    <% end %>
    var osmGeocoder = new L.Control.OSMGeocoder();

    map.addControl(osmGeocoder);
    var osmde = L.tileLayer.provider('OpenStreetMap.DE');
    var opentopo = L.tileLayer.provider('OpenTopoMap');
    var bing = new L.BingLayer("ApiJPrwDWWqUlXoy7gg460DQBa55V-i1XqWWQfnf1sz5HW4CfxUkBZ7afjaMtQ5W");
    
    var baseMaps = {
            "Bing": bing,
            "OSM DE": osmde,
            "OpenTopo": opentopo
    };
    var markers = L.markerClusterGroup({ chunkedLoading: true });
    var overlayMaps = {
        "Gruben": markers,
    };
    L.control.layers(baseMaps, overlayMaps).addTo(map);
    map.addLayer(osmde);
    
    //Array über alle Punkte:
    // <lat,long,Label,id,status,typ
    var addressPoints = [
      <%@mines.each do |mine| %>
          [<%=mine.latitude.to_s%>,<%=mine.longitude.to_s%>,"<%=mine.id.to_s + " - " + mine.name + " ("+sort_of_text(mine.sort)+")" %>", <%=mine.id.to_s%>, <%= state(mine) %>, <%=sort(mine)%>],
      <% end %>
    ]
   
    var markersId = {};

   for (var i = 0; i < addressPoints.length; i++) {
      var a = addressPoints[i];
      var m = L.marker(L.latLng(a[0], a[1]), { title: a[2], icon: ma[a[5]] });
      m._popup_id = a[3];
      //only if user is more then guest
      <% if current_user.user? %>
        m.on('click', onClick);
      <% end %>
      markers.addLayer(m);
      markersId[a[3]] = m;
    }
    map.addLayer(markers);
    map.invalidateSize();
    enable_top_menu("karte");
</script> 

